<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

    Checkstyle configuration that checks the project coding conventions from:

    Referenced by http://checkstyle.sourceforge.net/reports/google-java-style.html#s4.1.2-blocks-k-r-style

    Authors: jetq.

 -->

<module name = "Checker">
	
	<!-- 所有*.java，*.properties,*.xml 文件必须使用utf-8编码 -->
    <property name="charset" value="UTF-8"/>
    
    
	<!-- 
		告警级别
		ignore
		info
		warning
		error
	 -->
    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java, properties, xml"/>

    <!--  检验没一行不能出现\t   -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="TreeWalker">
    	<!-- block 结构检验规则 -->
	    	<!-- if else for while do case 需要括号 -->
	    	<module name="NeedBraces">
	    		<property name="allowEmptyLoopBody" value="false"/>
	    	</module>
	    	<!-- 
	    		switch (num) {
				    case 1: counter++; break; // ERROR
				    case 6: counter += 10; break; // ERROR
				    default: counter = 100; break; // ERROR
				}
	    	 -->
	    	
	    	<module name="LeftCurly">
			    <property name="option" value="nl"/>
			    <property name="maxLineLength" value="100"/>
			</module>
			
			<module name="RightCurly">
				<!-- 右括号显示在新的一行或者 显示在同一行
					 // Brace is alone on the line
					    try {
					        ...
					    }
					    finally {
					        ...
					    }
					
					    // Single-line format of block
					    public long getId() { return id; }
				 -->
				 <property name="option" value="alone_or_singleline"/>
			</module>
			<!--  
	        <module name="RightCurly">
	            <property name="option" value="alone"/>
	            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
	        </module>
	        －>
	        
	        <!-- 检验空catch 块,catch 块中出现的变量与参数名一致 -->
	         <module name="EmptyCatchBlock">
	            <property name="exceptionVariableName" value="expected"/>
	        </module>
	        
	         <module name="EmptyBlock">
	            <property name="option" value="TEXT"/>
	            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
	        </module>
        <!-- block 结构检验规则 -->
        
        <!-- 注解用于class,interface,enum,method,同一行允许多个注解  -->
	        <module name="AnnotationLocation">
	            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
	        </module>
	        <module name="AnnotationLocation">
	            <property name="tokens" value="VARIABLE_DEF"/>
	            <property name="allowSamelineMultipleAnnotations" value="true"/>
	        </module>
        
        <!-- 关于class的check规则 -->
        
        	<module name="OneTopLevelClass"/>
        	<module name="FinalClass"/>
        	<!-- 含有私有构造方法的类必须用final修饰 -->
        	
        	<module name="DeclarationOrder"/>
        	<!--
        		声明顺序
        		＊静态变量
        		＊公共变量 
        		＊保护变量
        		＊私有变量
        		＊构造方法
        		＊函数：public,protected,private
        		public class A {
				    private double x = 1.0;
				    private double y = 2.0;
				    public double slope = x / y; // will be skipped from validation due to forward reference
				}
    
        	 -->
        	 
        	 <module name="DefaultComesLast"/>
        	 <!-- switch 必须跟default -->
        	
        	 <module name="EmptyStatement"/>
        	 <!-- 不允许有空语句 ; -->
        	 
        	 <module name="EqualsAvoidNull"/>
        	 <!-- 
	        	 	String nullString = null;
					nullString.equals("My_Sweet_String");
				
				should be refactored to:
				
					String nullString = null;
					"My_Sweet_String".equals(nullString);
        	  -->
        	  
        	  <module name="FallThrough"/>
        	  <module name="MissingSwitchDefault"/>
        	  <!-- 
        	  		switch (i){
						case 0:
						    i++; // fall through
						
						case 1:
						    i++;
						    // falls through
						case 2:
						case 3:
						case 4: {
						    i++;
						}
						// fallthrough
						case 5:
						    i++;
						/* fallthru */case 6:
						    i++
						    break;
						}
        	   -->
        	   
        	   <module name="FinalLocalVariable"/>
        	   <!-- 值不改变的变量 声明为final -->
        	 
        	   <module name="MagicNumber"/>
        	   <!-- 
        	   	<property name="ignoreNumbers" value="0, 0.5, 1"/>
			    <property name="ignoreFieldDeclaration" value="true"/>
			    <property name="ignoreAnnotation" value="true"/>
			    @MyAnnotation(6) // violation
				class MyClass {
				    private field = 7; // violation
				
				    void foo() {
				       int i = i + 1; // no violation
				       int j = j + 8; // violation
				    }
				}   	
        	    -->
        	    
        	    <module name="MultipleStringLiterals">
				    <property name="allowedDuplicates" value="2"/>
				</module>
				<!--  检测重复代码，只允许出现两次-->
				
				<module name="NestedForDepth">
				    <property name="max" value="3"/>
				</module>
				<module name="NestedIfDepth">
				    <property name="max" value="3"/>
				</module>
				<module name="NestedTryDepth">
				    <property name="max" value="2"/>
				</module>
				<!-- if for 最多嵌套3次 ,try 最多嵌套2次 -->
				
				<module name="OneStatementPerLine"/>
				<!-- statement 只占据一行 
					//Multi-line statements:
						int var1 = 1
						; var2 = 2; //violation here
						int o = 1, p = 2,
						r = 5; int t; //violation here
				-->
				
				<module name="OverloadMethodsDeclarationOrder"/>
        	    <!-- 
        	    	    public void foo(int i) {}
						public void foo(String s) {}
						public void notFoo() {} // Have to be after foo(int i, String s)
						public void foo(int i, String s) {}
        	     -->
        	     
        	     <module name="PackageDeclaration"/>
        	     <!-- 每个source 文件必须包含 package声明，且声明和文件目录一致 -->
        	     
        	     <module name="SimplifyBooleanExpression"/>
        	     <!-- find if (b == true), b || true, !false -->
        	     
        	     <module name="SimplifyBooleanReturn"/>
        	     <!-- 
        	     	if (valid())
					    return false;
					else
					    return true;
					
					could be written as
					
					return !valid();
        	      -->
        	      
        	      <module name="StringLiteralEquality"/>
        	      <!-- 
        	      	if (x == "something")
        	      	when they mean
        	      	if ("something".equals(x))
        	       -->
        	       
        	    <module name="IllegalTokenText">
		            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
		            <property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
		            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
		        </module>
		        <!-- 过滤非法字符 -->
		        
		         <module name="MultipleVariableDeclarations"/>
		         <!-- 每一个变量必须定义在自己的语句，并且在当前文件 
		         	String empty,test;
		         -->
		         
		         <module name="NoFinalizer"/>
		         <!-- 不允许在类中定义finalizer 方法 -->
		        
		         <module name="VariableDeclarationUsageDistance"/>
		         <!-- 
		         	int count;
					a = a + b;
					b = a + a;
					count = b; // DECLARATION OF VARIABLE 'count'
					           // SHOULD BE HERE (distance = 3)
		          --> 
		          
        <!-- 关于class的check规则   -->
        
        <!-- 
        	<module name="Header">
			    <property name="header"
			              value="// Copyright (C) 2004 MyCompany\n// All rights reserved"/>
			</module>
         -->
        
        <!-- import check规则-->
			   <module name="AvoidStarImport"/>
			   <!-- 避免import时，使用.* -->
			   <module name="AvoidStaticImport"/>
			   
			   <module name="CustomImportOrder">
		       <!--     <property name="specialImportsRegExp" value="com.g360"/> -->
		           <property name="sortImportsInGroupAlphabetically" value="true"/>
		           <property name="customImportOrderRules" value="STATIC###SAME_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE"/>
		       </module>
			   <module name="UnusedImports"/>
			   
        <!-- import check规则-->
        
        <!-- javadoc check规则-->
        	   <module name="AtclauseOrder">
		            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
		            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
		       </module>
        	   
        	   <module name="JavadocTagContinuationIndentation"/>
        	   <!-- 检验java doc 缩进 -->
        	   
        	   <module name="JavadocMethod">
		            <property name="scope" value="public"/>
		            <property name="allowMissingParamTags" value="true"/>
		            <property name="allowMissingThrowsTags" value="true"/>
		            <property name="allowMissingReturnTag" value="true"/>
		            <property name="minLineCount" value="2"/>
		            <property name="allowedAnnotations" value="Override, Test"/>
		            <property name="allowThrowsTagsForSubclasses" value="true"/>
		       </module>
		       
		       <module name="JavadocParagraph"/>
        	   
        	     
		        <module name="SingleLineJavadoc">
		            <property name="ignoreInlineTags" value="false"/>
		        </module>
		        <!-- 包含@的注释必须format 为多行 -->
		        
		        <module name="NonEmptyAtclauseDescription"/>
		        <!-- @ 后必须跟描述 -->
		        
        <!-- javadoc check规则-->

        <!-- Miscellaneous check规则-->
       		 <module name="ArrayTypeStyle"/>
       		 <!--  String[] args  java style   String args[]  c style-->
       		 
       		  <module name="AvoidEscapedUnicodeCharacters">
	            <property name="allowEscapesForControlCharacters" value="true"/>
	            <property name="allowByTailComment" value="true"/>
	            <property name="allowNonPrintableEscapes" value="true"/>
	          </module>
	          <!-- 代码中不允许出现unicode 如果是不可打印的字符则可-->
       		 
       		 <!-- http://checkstyle.sourceforge.net/config_misc.html#CommentsIndentation -->
       		   <module name="CommentsIndentation"/>
       		   <!-- 
       		   		*缩进
       		    -->
       		    
       		    <module name="Indentation">
		            <property name="basicOffset" value="2"/>
		            <property name="braceAdjustment" value="0"/>
		            <property name="caseIndent" value="2"/>
		            <property name="throwsIndent" value="4"/>
		            <property name="lineWrappingIndentation" value="4"/>
		            <property name="arrayInitIndent" value="2"/>
		        </module>
       		   
       		   	 <module name="OuterTypeFilename"/>
       		   	 <!-- class Foo 必须在文件foo.java中 -->
       		   	 
       		   	 <module name="UpperEll"/>
       		   	 <!-- long 类型使用'L'而不是'l' -->
       		   	 
        <!-- Miscellaneous check规则-->

        <!-- Modifiers check规则-->
        	<module name="ModifierOrder"/>
        	<!--  
        		public
				protected
				private
				abstract
				static
				final
				transient
				volatile
				synchronized
				native
				strictfp
        	-->
        <!-- Modifiers check规则-->

        <!-- Naming conventions check规则-->
        		
        		<module name="AbbreviationAsWordInName">
		            <property name="ignoreFinal" value="false"/>
		            <property name="allowedAbbreviationLength" value="1"/>
		        </module>
		        <!-- 除过final 变量不允许有连续的大写字母 -->
		        
		        <module name="ClassTypeParameterName">
		            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
		            <message key="name.invalidPattern"
		                value="Class type name ''{0}'' must match pattern ''{1}''."/>
		        </module>
		        
		         <module name="MethodTypeParameterName">
		            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
		            <message key="name.invalidPattern"
		                value="Method type name ''{0}'' must match pattern ''{1}''."/>
		        </module>
		        
		        <module name="TypeName">
		            <message key="name.invalidPattern"
		                value="Type name ''{0}'' must match pattern ''{1}''."/>
		        </module>
		        <!-- 类名，方法类型,类型 首字母大写 -->
		        
		        <module name="LocalVariableName">
		            <property name="tokens" value="VARIABLE_DEF"/>
		            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
		            <property name="allowOneCharVarInForLoop" value="true"/>
		            <message key="name.invalidPattern"
		                value="Local variable name ''{0}'' must match pattern ''{1}''."/>
		        </module>
		       
		         <module name="MemberName">
		            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
		            <message key="name.invalidPattern"
		                value="Member name ''{0}'' must match pattern ''{1}''."/>
		        </module>
		        
		        <module name="MethodName">
		            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
		            <message key="name.invalidPattern"
		                value="Method name ''{0}'' must match pattern ''{1}''."/>
		        </module>
		        
		        <module name="PackageName">
		            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
		            <message key="name.invalidPattern"
		                value="Package name ''{0}'' must match pattern ''{1}''."/>
		        </module>
		        
		        <module name="ParameterName">
		            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
		            <message key="name.invalidPattern"
		                value="Parameter name ''{0}'' must match pattern ''{1}''."/>
		        </module>
		         <!--成员名, 局部变量，方法名,包名,参数名 使用小写字母开头 for循环中允许单字符变量-->
        
        <!-- Naming conventions check规则-->


        <!-- Size Violations check规则-->
        
        	<module name="FileLength">
			      <property name="max" value="1500"/>
			</module>
			
			  <!-- 每行不超过120个字符 -->
	        <module name="LineLength">
	            <property name="max" value="120"/>
	            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
	        </module>
	        
	        <!-- 
	        	<module name="MethodCount">
				      <property name="maxTotal" value="30"/>
				</module>
				
				//类中方法总数
				
				<module name="MethodLength">
				   <property name="tokens" value="METHOD_DEF"/>
				   <property name="max" value="60"/>
				</module>
				
				//类长度
				<module name="ParameterNumber">
				   <property name="max" value="10"/>
				   <property name="tokens" value="METHOD_DEF"/>
				</module>
       			 //构造函数，方法最大的参数个数
	         -->
        <!-- Size Violations check规则-->

        <!-- White space check规则-->
        	
        	<module name="NoLineWrap"/>
        	<!-- 
        		
				import com.puppycrawl.tools.
				    checkstyle.api.AbstractCheck;
      
        	 -->
            <module name="WhitespaceAround">
	            <property name="allowEmptyConstructors" value="true"/>
	            <property name="allowEmptyMethods" value="true"/>
	            <property name="allowEmptyTypes" value="true"/>
	            <property name="allowEmptyLoops" value="true"/>
	            <message key="ws.notFollowed"
	                value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
	            <message key="ws.notPreceded"
	                value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
       		 </module>
       		 
       		 <module name="GenericWhitespace">
	            <message key="ws.followed"
	                value="GenericWhitespace ''{0}'' is followed by whitespace."/>
	            <message key="ws.preceded"
	                value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
	            <message key="ws.illegalFollow"
	                value="GenericWhitespace ''{0}'' should followed by whitespace."/>
	            <message key="ws.notPreceded"
	                value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
	        </module>
	        <!-- 检验'<','>' 左右的空格 
	        
	        	public void <K, V extends Number> boolean foo(K, V) {} // Generic methods definitions
				class name<T1, T2, ..., Tn> {}                         // Generic type definition
				OrderedPair<String, Box<Integer>> p;                   // Generic type reference
				boolean same = Util.<Integer, String>compare(p1, p2);  // Generic preceded method name
				Pair<Integer, String> p1 = new Pair<>(1, "apple");     // Diamond operator
				List<T> list = ImmutableList.Builder<T>::new;          // Method reference
				sort(list, Comparable::<String>compareTo);             // Method reference
	        -->
        	
        	<module name="MethodParamPad">
			    <property name="tokens" value="METHOD_DEF"/>
			    <property name="option" value="space"/>
			    <property name="allowLineBreaks" value="false"/>
			</module>
			<!-- 检验方法名 圆括号，是否允许line break -->
			
			 <module name="OperatorWrap">
	            <property name="option" value="NL"/>
	            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
	        </module>
	        <!-- 含有运算符的行，Wrap时需要跨行 -->
	        
	        <module name="SeparatorWrap">
	            <property name="tokens" value="DOT"/>
	            <property name="option" value="nl"/>
	        </module>
	        <module name="SeparatorWrap">
	            <property name="tokens" value="COMMA"/>
	            <property name="option" value="EOL"/>
	        </module>
	        <!-- 
	        	s
				    .isEmpty();
				foo(i
				    ,s);
	        nl	The token must be on a new line. For example:
			    someVariable = aBigVariableNameToMakeThings + "this may work"
			                   + lookVeryInteresting;
			            
			eol	The token must be at the end of the line. For example:
			    someVariable = aBigVariableNameToMakeThings + "this may work" +
			                   lookVeryInteresting;
	         -->
	         
	          <module name="EmptyLineSeparator">
	            <property name="allowNoEmptyLineBetweenFields" value="true"/>
	          </module>
	          <!-- 
	          	///////////////////////////////////////////////////
				//HEADER
				///////////////////////////////////////////////////
				
				package com.puppycrawl.tools.checkstyle.whitespace;
				
				import java.io.Serializable;
				
				class Foo
				{
				    public static final int FOO_CONST = 1;
				
				    public void foo() {} //should be separated from previous statement.
				}
	           -->
        
        <!-- White space check规则-->
    </module>
</module>
